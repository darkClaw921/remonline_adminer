// –ü–ª–∏—Ç–æ—á–Ω–∞—è —Ç–µ–º–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤–∫–ª–∞–¥–∫–∞–º

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º–µ
const tileState = {
  currentView: 'categories', // 'categories', 'tabs', 'table'
  selectedCategory: null, // 'apple', 'android'
  selectedTab: null,
  selectedSubtab: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º—ã
function initTileTheme() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º—ã');
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  tileState.currentView = 'categories';
  tileState.selectedCategory = null;
  tileState.selectedTab = null;
  tileState.selectedSubtab = null;
  
  // –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã
  // –¥–∞–∂–µ –µ—Å–ª–∏ —É –Ω–∏—Ö –±—ã–ª —É–¥–∞–ª–µ–Ω –∫–ª–∞—Å—Å theme-classic-only
  const tableCard = document.querySelector('.card');
  const tableContainer = document.getElementById('tableContainer');
  const tabsContainer = document.getElementById('tabsContainer');
  const pagination = document.querySelector('#pagination')?.parentElement;
  const pageInfo = document.querySelector('#pageInfo')?.parentElement;
  const columnsSettingsBtn = document.getElementById('columnsSettingsBtn')?.parentElement;
  const mainTabsDiv = document.querySelector('.main-tabs');
  
  // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –∏–º –∫–ª–∞—Å—Å—ã
  if (tableCard) {
    tableCard.style.display = 'none';
    if (!tableCard.classList.contains('theme-classic-only')) {
      tableCard.classList.add('theme-classic-only');
    }
  }
  if (tableContainer) {
    tableContainer.style.display = 'none';
    if (!tableContainer.classList.contains('theme-classic-only')) {
      tableContainer.classList.add('theme-classic-only');
    }
  }
  if (tabsContainer) {
    tabsContainer.style.display = 'none';
    if (!tabsContainer.classList.contains('theme-classic-only')) {
      tabsContainer.classList.add('theme-classic-only');
    }
  }
  if (pagination) {
    pagination.style.display = 'none';
    if (!pagination.classList.contains('theme-classic-only')) {
      pagination.classList.add('theme-classic-only');
    }
  }
  if (pageInfo) {
    pageInfo.style.display = 'none';
    if (!pageInfo.classList.contains('theme-classic-only')) {
      pageInfo.classList.add('theme-classic-only');
    }
  }
  if (columnsSettingsBtn) {
    columnsSettingsBtn.style.display = 'none';
    if (!columnsSettingsBtn.classList.contains('theme-classic-only')) {
      columnsSettingsBtn.classList.add('theme-classic-only');
    }
  }
  if (mainTabsDiv) {
    mainTabsDiv.style.display = 'none';
    if (!mainTabsDiv.classList.contains('theme-classic-only')) {
      mainTabsDiv.classList.add('theme-classic-only');
    }
  }
  
  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º—ã
  document.getElementById('backToTabsBtn')?.remove();
  document.getElementById('backToSubtabsBtn')?.remove();
  document.getElementById('backToCategoriesBtn')?.remove();
  document.getElementById('manageProductsBtn')?.remove();
  document.getElementById('manageSubtabProductsBtn')?.remove();
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–∏—Ç–æ–∫
  const tilesContainer = document.getElementById('tilesContainer');
  if (tilesContainer) {
    tilesContainer.style.display = '';
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  showCategoryTiles();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ theme-manager
window.initTileTheme = initTileTheme;

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (Apple/Android)
function showCategoryTiles() {
  tileState.currentView = 'categories';
  
  const tilesContainer = document.getElementById('tilesContainer');
  if (!tilesContainer) return;
  
  tilesContainer.innerHTML = `
    <div class="tiles-section-header">
      <h2 class="tiles-section-title">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h2>
      <p class="tiles-section-subtitle">–¢–æ–≤–∞—Ä—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º</p>
    </div>
    <div class="category-tiles-wrapper">
      <div class="category-tile apple-tile" data-category="apple">
        <span class="category-tile-icon">üçé</span>
        <h3 class="category-tile-title">Apple</h3>
        <p class="category-tile-subtitle">iPhone, iPad, Mac –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã</p>
      </div>
      <div class="category-tile android-tile" data-category="android">
        <span class="category-tile-icon">ü§ñ</span>
        <h3 class="category-tile-title">Android</h3>
        <p class="category-tile-subtitle">–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã Android</p>
      </div>
    </div>
  `;
  
  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  tilesContainer.querySelectorAll('.category-tile').forEach(tile => {
    tile.addEventListener('click', (e) => {
      const category = e.currentTarget.dataset.category;
      selectCategory(category);
    });
  });
}

// –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function selectCategory(category) {
  tileState.selectedCategory = category;
  tileState.currentView = 'tabs';
  
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  await showTabTiles(category);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –≤–∫–ª–∞–¥–æ–∫
async function showTabTiles(category) {
  const tilesContainer = document.getElementById('tilesContainer');
  if (!tilesContainer) return;
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  tilesContainer.innerHTML = `
    <div class="tile-navigation">
      <button class="btn btn-outline-secondary tile-back-btn" id="backToCategoriesBtn">
        ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      </button>
    </div>
    <div class="tiles-section-header">
      <h2 class="tiles-section-title">–ó–∞–≥—Ä—É–∑–∫–∞...</h2>
    </div>
  `;
  
  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  document.getElementById('backToCategoriesBtn')?.addEventListener('click', () => {
    showCategoryTiles();
  });
  
  try {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ –∏–∑ API
    const mainTabType = category === 'apple' ? 'apple' : category === 'android' ? 'android' : null;
    const url = `${API_BASE}/tabs/?active_only=true&limit=1000${mainTabType ? `&main_tab_type=${mainTabType}` : ''}`;
    
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category);
    console.log('URL –∑–∞–ø—Ä–æ—Å–∞:', url);
    
    const response = await fetch(url);
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
    
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫');
    
    let tabs = await response.json(); // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(tabs)) {
      console.error('–û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', tabs);
      tabs = [];
    }
    
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫:', tabs.length);
    if (tabs.length > 0) {
      console.log('–ü–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞:', tabs[0]);
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    const categoryTitle = category === 'apple' ? 'üçé Apple' : category === 'android' ? 'ü§ñ Android' : '–í—Å–µ';
    
    tilesContainer.innerHTML = `
      <div class="tile-navigation">
        <button class="btn btn-outline-secondary tile-back-btn" id="backToCategoriesBtn">
          ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        </button>
      </div>
      <div class="tiles-section-header">
        <h2 class="tiles-section-title">${categoryTitle}</h2>
        <p class="tiles-section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ: ${tabs.length})</p>
      </div>
      <div class="tabs-tiles-wrapper" id="tabsTilesGrid"></div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    document.getElementById('backToCategoriesBtn')?.addEventListener('click', () => {
      showCategoryTiles();
    });
    
    const tabsGrid = document.getElementById('tabsTilesGrid');
    
    if (!tabs || tabs.length === 0) {
      tabsGrid.innerHTML = `
        <div class="tiles-empty-state">
          <div class="tiles-empty-state-icon">üìÇ</div>
          <div class="tiles-empty-state-text">–ù–µ—Ç –≤–∫–ª–∞–¥–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</div>
          <div class="text-muted mt-2" style="font-size: 0.9rem;">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (‚öôÔ∏è) –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${categoryTitle}
          </div>
        </div>
      `;
      return;
    }
    
    // –°–æ–∑–¥–∞—Ç—å –ø–ª–∏—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    tabs.forEach(tab => {
      const subtabsCount = tab.subtabs ? tab.subtabs.length : 0;
      
      const tile = document.createElement('div');
      tile.className = 'tab-tile';
      tile.dataset.tabId = tab.id;
      tile.innerHTML = `
        <div class="tab-tile-header">
          <h4 class="tab-tile-title">${escapeHtml(tab.name)}</h4>
          ${subtabsCount > 0 ? `<span class="tab-tile-badge">${subtabsCount} ${declension(subtabsCount, '–ª–∏—Å—Ç', '–ª–∏—Å—Ç–∞', '–ª–∏—Å—Ç–æ–≤')}</span>` : ''}
        </div>
        ${subtabsCount > 0 ? `
          <div class="tab-tile-subtabs">
            <span class="tab-tile-subtabs-icon">üìã</span>
            ${subtabsCount} ${declension(subtabsCount, '–ø–æ–¥–≤–∫–ª–∞–¥–∫–∞', '–ø–æ–¥–≤–∫–ª–∞–¥–∫–∏', '–ø–æ–¥–≤–∫–ª–∞–¥–æ–∫')}
          </div>
        ` : ''}
      `;
      
      tile.addEventListener('click', () => {
        selectTab(tab);
      });
      
      tabsGrid.appendChild(tile);
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫:', error);
    tilesContainer.innerHTML = `
      <div class="tile-navigation">
        <button class="btn btn-outline-secondary tile-back-btn" id="backToCategoriesBtn">
          ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        </button>
      </div>
      <div class="alert alert-danger">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
      </div>
    `;
    
    document.getElementById('backToCategoriesBtn')?.addEventListener('click', () => {
      showCategoryTiles();
    });
  }
}

// –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –∫–∞–∫ –ø–ª–∏—Ç–∫–∏
async function selectTab(tab) {
  tileState.selectedTab = tab;
  tileState.currentView = 'subtabs';
  
  console.log('–ü–æ–∫–∞–∑ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏:', tab.name);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  await showSubtabTiles(tab);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
async function showSubtabTiles(tab) {
  const tilesContainer = document.getElementById('tilesContainer');
  if (!tilesContainer) return;
  
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏:', tab.id);
  
  try {
    const response = await fetch(`/api/v1/tabs/${tab.id}/subtabs`);
    const subtabs = await response.json();
    
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫:', subtabs.length);
    
    if (subtabs.length === 0) {
      tilesContainer.innerHTML = `
        <div class="tiles-section-header">
          <button class="btn btn-outline-secondary btn-sm mb-3" onclick="backToTabs()">‚Üê –ù–∞–∑–∞–¥ –∫ –≤–∫–ª–∞–¥–∫–∞–º</button>
          <h2 class="tiles-section-title">${tab.name}</h2>
          <p class="tiles-section-subtitle">–ù–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –≤ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ</p>
        </div>
        <div class="alert alert-info">
          <p class="mb-0">–í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ (–ª–∏—Å—Ç–æ–≤).</p>
        </div>
      `;
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ (–±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    tilesContainer.innerHTML = `
      <div class="tile-navigation">
        <button class="btn btn-outline-secondary tile-back-btn" id="backToTabsBtn">
          ‚Üê –ù–∞–∑–∞–¥ –∫ –≤–∫–ª–∞–¥–∫–∞–º
        </button>
      </div>
      <div class="tile-header">
        <h2 class="tiles-section-title">${tab.name}</h2>
        <p class="tiles-section-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É (–ª–∏—Å—Ç) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ: ${subtabs.length})</p>
      </div>
      <div class="tabs-tiles-wrapper" id="subtabsTilesGrid"></div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    document.getElementById('backToTabsBtn')?.addEventListener('click', () => {
      backToTabs();
    });
    
    const subtabsGrid = document.getElementById('subtabsTilesGrid');
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∏—Ç–∫–∏ –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–æ–≤
    for (const subtab of subtabs) {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∏—Ç–∫—É
      const tile = document.createElement('div');
      tile.className = 'tab-tile';
      tile.dataset.subtabId = subtab.id;
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      tile.innerHTML = `
        <div class="tab-tile-header">
          <h4 class="tab-tile-title">${escapeHtml(subtab.name)}</h4>
          <span class="tab-tile-badge">
            <div class="spinner-border spinner-border-sm" role="status">
              <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
          </span>
        </div>
        <div class="tab-tile-subtabs">
          <span class="tab-tile-subtabs-icon">üì¶</span>
          –ó–∞–≥—Ä—É–∑–∫–∞...
        </div>
      `;
      
      tile.addEventListener('click', () => {
        selectSubtab(tab, subtab);
      });
      
      subtabsGrid.appendChild(tile);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      fetch(`/api/v1/tabs/subtabs/${subtab.id}/products`)
        .then(response => response.json())
        .then(products => {
          const productsCount = products.length;
          tile.innerHTML = `
            <div class="tab-tile-header">
              <h4 class="tab-tile-title">${escapeHtml(subtab.name)}</h4>
              ${productsCount > 0 ? `<span class="tab-tile-badge">${productsCount} ${declension(productsCount, '—Ç–æ–≤–∞—Ä', '—Ç–æ–≤–∞—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–≤')}</span>` : ''}
            </div>
            ${productsCount > 0 ? `
              <div class="tab-tile-subtabs">
                <span class="tab-tile-subtabs-icon">üì¶</span>
                ${productsCount} ${declension(productsCount, '—Ç–æ–≤–∞—Ä', '—Ç–æ–≤–∞—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–≤')}
              </div>
            ` : `
              <div class="tab-tile-subtabs text-muted">
                <span class="tab-tile-subtabs-icon">üì≠</span>
                –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
              </div>
            `}
          `;
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
          tile.innerHTML = `
            <div class="tab-tile-header">
              <h4 class="tab-tile-title">${escapeHtml(subtab.name)}</h4>
            </div>
            <div class="tab-tile-subtabs text-muted">
              <span class="tab-tile-subtabs-icon">üì¶</span>
              –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            </div>
          `;
        });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫:', error);
    tilesContainer.innerHTML = `
      <div class="tiles-section-header">
        <button class="btn btn-outline-secondary btn-sm mb-3" onclick="backToTabs()">‚Üê –ù–∞–∑–∞–¥ –∫ –≤–∫–ª–∞–¥–∫–∞–º</button>
        <h2 class="tiles-section-title">${tab.name}</h2>
      </div>
      <div class="alert alert-danger">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫: ${error.message}
      </div>
    `;
  }
}

// –í—ã–±–æ—Ä –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
function selectSubtab(tab, subtab) {
  tileState.selectedTab = tab;
  tileState.selectedSubtab = subtab;
  tileState.currentView = 'table';
  
  console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', subtab.name);
  
  // –°–∫—Ä—ã—Ç—å –ø–ª–∏—Ç–∫–∏
  const tilesContainer = document.getElementById('tilesContainer');
  if (tilesContainer) {
    tilesContainer.style.display = 'none';
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ —Ñ–∏–ª—å—Ç—Ä—ã - –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å theme-classic-only
  const tableCard = document.querySelector('.card');
  const tableContainer = document.getElementById('tableContainer');
  const tabsContainer = document.getElementById('tabsContainer');
  const pagination = document.querySelector('#pagination')?.parentElement;
  const pageInfo = document.querySelector('#pageInfo')?.parentElement;
  const columnsSettingsBtn = document.getElementById('columnsSettingsBtn')?.parentElement;
  const mainTabsDiv = document.querySelector('.main-tabs');
  
  // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å theme-classic-only, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞–ª–∏ –≤–∏–¥–∏–º—ã–º–∏
  if (tableCard) {
    tableCard.classList.remove('theme-classic-only');
    tableCard.style.display = '';
  }
  if (tableContainer) {
    tableContainer.classList.remove('theme-classic-only');
    tableContainer.style.display = '';
  }
  // –í –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–∫–ª–∞–¥–æ–∫ - –æ–Ω–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
  if (tabsContainer) {
    tabsContainer.style.display = 'none';
  }
  if (pagination) {
    pagination.classList.remove('theme-classic-only');
    pagination.style.display = '';
  }
  if (pageInfo) {
    pageInfo.classList.remove('theme-classic-only');
    pageInfo.style.display = '';
  }
  if (columnsSettingsBtn) {
    columnsSettingsBtn.classList.remove('theme-classic-only');
    columnsSettingsBtn.style.display = '';
  }
  // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Apple, Android, –í—Å–µ) –≤ –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º–µ
  if (mainTabsDiv) {
    mainTabsDiv.style.setProperty('display', 'none', 'important');
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º" –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
  addBackToSubtabsButton();
  
  // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  addManageSubtabProductsButton(subtab);
  
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  loadProductsForSubtab(subtab);
  
  console.log('–¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø–ª–∏—Ç–æ—á–Ω–æ–π —Ç–µ–º–µ');
}

// –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º"
function addBackToSubtabsButton() {
  const cardBody = document.querySelector('.card .card-body');
  if (!cardBody) return;
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∏
  if (document.getElementById('backToSubtabsBtn')) return;
  
  const backBtn = document.createElement('button');
  backBtn.id = 'backToSubtabsBtn';
  backBtn.className = 'btn btn-sm btn-outline-secondary mb-2';
  backBtn.innerHTML = '‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º';
  backBtn.addEventListener('click', () => {
    backToSubtabs();
  });
  
  cardBody.insertBefore(backBtn, cardBody.firstChild);
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º
function backToSubtabs() {
  console.log('–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–ª–∏—Ç–∫–∞–º –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫');
  
  // –°–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞—Å—Å—ã
  const tableCard = document.querySelector('.card');
  const tableContainer = document.getElementById('tableContainer');
  const tabsContainer = document.getElementById('tabsContainer');
  const pagination = document.querySelector('#pagination')?.parentElement;
  const pageInfo = document.querySelector('#pageInfo')?.parentElement;
  const columnsSettingsBtn = document.getElementById('columnsSettingsBtn')?.parentElement;
  const mainTabsDiv = document.querySelector('.main-tabs');
  
  if (tableCard) {
    tableCard.style.display = 'none';
    tableCard.classList.add('theme-classic-only');
  }
  if (tableContainer) {
    tableContainer.style.display = 'none';
    tableContainer.classList.add('theme-classic-only');
  }
  if (tabsContainer) {
    tabsContainer.style.display = 'none';
    tabsContainer.classList.add('theme-classic-only');
  }
  if (pagination) {
    pagination.style.display = 'none';
    pagination.classList.add('theme-classic-only');
  }
  if (pageInfo) {
    pageInfo.style.display = 'none';
    pageInfo.classList.add('theme-classic-only');
  }
  if (columnsSettingsBtn) {
    columnsSettingsBtn.style.display = 'none';
    columnsSettingsBtn.classList.add('theme-classic-only');
  }
  // –í–µ—Ä–Ω—É—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (mainTabsDiv) {
    mainTabsDiv.style.removeProperty('display');
  }
  
  // –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏ –∫–Ω–æ–ø–∫—É "–†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
  document.getElementById('backToSubtabsBtn')?.remove();
  document.getElementById('manageSubtabProductsBtn')?.remove();
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
  const tilesContainer = document.getElementById('tilesContainer');
  if (tilesContainer) {
    tilesContainer.style.display = '';
  }
  
  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  if (tileState.selectedTab) {
    showSubtabTiles(tileState.selectedTab);
  }
}

// –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏" –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
function addManageSubtabProductsButton(subtab) {
  const cardBody = document.querySelector('.card .card-body');
  if (!cardBody) return;
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
  if (document.getElementById('manageSubtabProductsBtn')) return;
  
  // –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º"
  const backBtn = document.getElementById('backToSubtabsBtn');
  if (!backBtn) return;
  
  // –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
  const manageBtn = document.createElement('button');
  manageBtn.id = 'manageSubtabProductsBtn';
  manageBtn.className = 'btn btn-primary btn-sm ms-2 mb-2';
  manageBtn.innerHTML = 'üì¶ –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏';
  manageBtn.addEventListener('click', () => openSubtabProductsManagement(subtab));
  
  // –í—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  backBtn.parentElement.insertBefore(manageBtn, backBtn.nextSibling);
}

// –û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
function openSubtabProductsManagement(subtab) {
  console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', subtab);
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Subtab –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤
  const dummySubtab = new Subtab({
    id: subtab.id,
    name: subtab.name,
    order_index: subtab.order_index,
    is_active: true
  }, null);
  
  dummySubtab.openProductsManager();
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
async function openProductManagement(tab) {
  console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏:', tab);
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = createSubtabsModal(tab);
  document.body.appendChild(modal);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const bsModal = new bootstrap.Modal(modal);
  bsModal.show();
  
  // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
  modal.addEventListener('hidden.bs.modal', () => {
    modal.remove();
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  await loadSubtabsForModal(modal, tab);
}

// –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏
function createSubtabsModal(tab) {
  const modal = document.createElement('div');
  modal.className = 'modal fade';
  modal.tabIndex = -1;
  modal.innerHTML = `
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏: ${tab.name}</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <button type="button" class="btn btn-primary" id="addNewSubtab">
              + –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É (–ª–∏—Å—Ç)
            </button>
          </div>
          <div id="subtabsList">
            <div class="text-center">
              <div class="spinner-border" role="status">
                <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    </div>
  `;
  
  return modal;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function loadSubtabsForModal(modal, tab) {
  const container = modal.querySelector('#subtabsList');
  const addButton = modal.querySelector('#addNewSubtab');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –≤–∫–ª–∞–¥–∫–∏
    const response = await fetch(`/api/v1/tabs/${tab.id}/subtabs`);
    const subtabs = await response.json();
    
    if (subtabs.length === 0) {
      container.innerHTML = '<div class="alert alert-info">–ù–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É.</div>';
    } else {
      renderSubtabsList(container, subtabs, tab);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
    addButton.addEventListener('click', async () => {
      const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ (–ª–∏—Å—Ç–∞):');
      if (!name || !name.trim()) return;
      
      try {
        const createResponse = await fetch(`/api/v1/tabs/${tab.id}/subtabs`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            tab_id: tab.id,
            name: name.trim(),
            is_active: true
          })
        });
        
        if (createResponse.ok) {
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
          await loadSubtabsForModal(modal, tab);
        } else {
          alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫:', error);
    container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫</div>';
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
function renderSubtabsList(container, subtabs, tab) {
  const html = subtabs.map(subtab => `
    <div class="card mb-2" data-subtab-id="${subtab.id}">
      <div class="card-body">
        <div class="row align-items-center">
          <div class="col">
            <h6 class="mb-1">${subtab.name}</h6>
            <small class="text-muted">ID: ${subtab.id} | –ü–æ—Ä—è–¥–æ–∫: ${subtab.order_index}</small>
          </div>
          <div class="col-auto">
            <button type="button" class="btn btn-sm btn-primary" 
                    onclick="openSubtabProducts(${tab.id}, ${subtab.id}, '${subtab.name.replace(/'/g, "\\'")}')">
              üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" 
                    onclick="renameSubtab(${tab.id}, ${subtab.id})">
              ‚úèÔ∏è
            </button>
            <button type="button" class="btn btn-sm btn-outline-danger" 
                    onclick="deleteSubtab(${tab.id}, ${subtab.id})">
              ‚úï
            </button>
          </div>
        </div>
      </div>
    </div>
  `).join('');
  
  container.innerHTML = html;
}

// –û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
window.openSubtabProducts = function(tabId, subtabId, subtabName) {
  console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', subtabId);
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Subtab –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤
  const subtab = {
    id: subtabId,
    name: subtabName,
    openProductsManager: function() {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ tab.js —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
      const dummySubtab = new Subtab({
        id: subtabId,
        name: subtabName,
        order_index: 0,
        is_active: true
      }, null);
      
      dummySubtab.openProductsManager();
    }
  };
  
  subtab.openProductsManager();
};

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
window.renameSubtab = async function(tabId, subtabId) {
  const newName = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:');
  if (!newName || !newName.trim()) return;
  
  try {
    const response = await fetch(`/api/v1/tabs/subtabs/${subtabId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: newName.trim()
      })
    });
    
    if (response.ok) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const card = document.querySelector(`[data-subtab-id="${subtabId}"]`);
      if (card) {
        const h6 = card.querySelector('h6');
        if (h6) h6.textContent = newName.trim();
      }
    } else {
      alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
  }
};

// –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
window.deleteSubtab = async function(tabId, subtabId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É? –í—Å–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –Ω–µ—ë.')) return;
  
  try {
    const response = await fetch(`/api/v1/tabs/subtabs/${subtabId}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM
      const card = document.querySelector(`[data-subtab-id="${subtabId}"]`);
      if (card) card.remove();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
      const container = document.getElementById('subtabsList');
      if (container && container.children.length === 0) {
        container.innerHTML = '<div class="alert alert-info">–ù–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É.</div>';
      }
    } else {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
  }
};

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
function loadProductsForSubtab(subtab) {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', subtab);
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  const tempSubtab = new Subtab({
    id: subtab.id,
    name: subtab.name,
    order_index: subtab.order_index,
    is_active: true
  }, null);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
  window.activeSubtab = tempSubtab;
  
  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadPage –∏–∑ products.js –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
  if (typeof loadPage === 'function') {
    loadPage(0);
  } else {
    console.warn('–§—É–Ω–∫—Ü–∏—è loadPage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∏—Ç–∫–∞–º –≤–∫–ª–∞–¥–æ–∫
function backToTabs() {
  console.log('–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–ª–∏—Ç–∫–∞–º –≤–∫–ª–∞–¥–æ–∫');
  
  // –°–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞—Å—Å—ã
  const tableCard = document.querySelector('.card');
  const tableContainer = document.getElementById('tableContainer');
  const tabsContainer = document.getElementById('tabsContainer');
  const pagination = document.querySelector('#pagination')?.parentElement;
  const pageInfo = document.querySelector('#pageInfo')?.parentElement;
  const columnsSettingsBtn = document.getElementById('columnsSettingsBtn')?.parentElement;
  const mainTabsDiv = document.querySelector('.main-tabs');
  
  if (tableCard) {
    tableCard.style.display = 'none';
    tableCard.classList.add('theme-classic-only');
  }
  if (tableContainer) {
    tableContainer.style.display = 'none';
    tableContainer.classList.add('theme-classic-only');
  }
  if (tabsContainer) {
    tabsContainer.style.display = 'none';
    tabsContainer.classList.add('theme-classic-only');
  }
  if (pagination) {
    pagination.style.display = 'none';
    pagination.classList.add('theme-classic-only');
  }
  if (pageInfo) {
    pageInfo.style.display = 'none';
    pageInfo.classList.add('theme-classic-only');
  }
  if (columnsSettingsBtn) {
    columnsSettingsBtn.style.display = 'none';
    columnsSettingsBtn.classList.add('theme-classic-only');
  }
  // –í–µ—Ä–Ω—É—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (mainTabsDiv) {
    mainTabsDiv.style.removeProperty('display');
  }
  
  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
  document.getElementById('backToTabsBtn')?.remove();
  document.getElementById('backToSubtabsBtn')?.remove();
  document.getElementById('manageProductsBtn')?.remove();
  document.getElementById('manageSubtabProductsBtn')?.remove();
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –≤–∫–ª–∞–¥–æ–∫
  const tilesContainer = document.getElementById('tilesContainer');
  if (tilesContainer) {
    tilesContainer.style.display = '';
  }
  
  showTabTiles(tileState.selectedCategory);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function declension(number, one, two, five) {
  let n = Math.abs(number);
  n %= 100;
  if (n >= 5 && n <= 20) {
    return five;
  }
  n %= 10;
  if (n === 1) {
    return one;
  }
  if (n >= 2 && n <= 4) {
    return two;
  }
  return five;
}

