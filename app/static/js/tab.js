/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–æ–π
 */
class Subtab {
    constructor(data, parentTab) {
        this.id = data.id;
        this.tabId = data.tab_id;
        this.name = data.name;
        this.orderIndex = data.order_index;
        this.isActive = data.is_active;
        this.products = data.products || [];
        this.parentTab = parentTab;
        this.element = null;
        this.isSelected = false;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç DOM —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    createElement() {
        const subtabElement = document.createElement('div');
        subtabElement.className = 'subtab-item';
        subtabElement.dataset.subtabId = this.id;
        
        subtabElement.innerHTML = `
            <div class="subtab-header">
                <span class="subtab-name" title="${this.name}">${this.name}</span>
                <div class="subtab-actions">
                    <button class="btn-subtab-products" title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏">üì¶</button>
                    <button class="btn-subtab-edit" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn-subtab-close" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                </div>
            </div>
        `;

        this.element = subtabElement;
        this.bindEvents();
        
        return subtabElement;
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    bindEvents() {
        if (!this.element) return;

        const subtabHeader = this.element.querySelector('.subtab-header');
        const productsBtn = this.element.querySelector('.btn-subtab-products');
        const editBtn = this.element.querySelector('.btn-subtab-edit');
        const closeBtn = this.element.querySelector('.btn-subtab-close');

        // –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ - –≤—ã–±–æ—Ä
        subtabHeader.addEventListener('click', (e) => {
            if (e.target === productsBtn || e.target === editBtn || e.target === closeBtn) return;
            this.parentTab.selectSubtab(this);
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
        productsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.openProductsManager();
        });

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.startRename();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.delete();
        });
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    select() {
        this.isSelected = true;
        this.element.classList.add('selected');
    }

    /**
     * –°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    deselect() {
        this.isSelected = false;
        this.element.classList.remove('selected');
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    openProductsManager() {
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', this.name);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        const modal = this.createProductsModal();
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('hidden.bs.modal', () => {
            modal.remove();
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        this.loadProductsForModal(modal);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
     */
    createProductsModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.tabIndex = -1;
        modal.innerHTML = `
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ "${this.name}"</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <input type="text" class="form-control" id="productSearch" placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...">
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="btn btn-primary" id="addSelectedProducts">
                                    –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <h6>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h6>
                                <div id="availableProducts" class="border p-2" style="height: 400px; overflow-y: auto;">
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6>–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ</h6>
                                <div id="subtabProducts" class="border p-2" style="height: 400px; overflow-y: auto;">
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
        
        return modal;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    async loadProductsForModal(modal) {
        const availableContainer = modal.querySelector('#availableProducts');
        const subtabContainer = modal.querySelector('#subtabProducts');
        const searchInput = modal.querySelector('#productSearch');
        const addButton = modal.querySelector('#addSelectedProducts');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            const response = await fetch('/api/v1/products/?limit=1000');
            const data = await response.json();
            const allProducts = data.data || [];
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
            const subtabProductIds = this.getProductIds();
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            const availableProducts = allProducts.filter(p => !subtabProductIds.includes(p.remonline_id));
            const currentProducts = allProducts.filter(p => subtabProductIds.includes(p.remonline_id));
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            this.renderProductsList(availableContainer, availableProducts, 'available');
            this.renderProductsList(subtabContainer, currentProducts, 'current');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    const query = e.target.value.toLowerCase();
                    const filtered = allProducts.filter(p => 
                        !subtabProductIds.includes(p.remonline_id) &&
                        p.name.toLowerCase().includes(query)
                    );
                    this.renderProductsList(availableContainer, filtered, 'available');
                }, 300);
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            addButton.addEventListener('click', () => {
                this.addSelectedProductsToSubtab(modal);
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            availableContainer.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
            subtabContainer.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
     */
    renderProductsList(container, products, type) {
        if (products.length === 0) {
            container.innerHTML = '<div class="text-muted">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const html = products.map(product => `
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" value="${product.remonline_id}" 
                       id="${type}_${product.id}" data-product-id="${product.id}">
                <label class="form-check-label" for="${type}_${product.id}">
                    <strong>${product.name}</strong><br>
                    <small class="text-muted">ID: ${product.remonline_id} | SKU: ${product.sku || '-'}</small>
                </label>
                ${type === 'current' ? `
                    <button type="button" class="btn btn-sm btn-outline-danger float-end" 
                            onclick="removeProductFromSubtab(${this.id}, ${product.remonline_id})">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                ` : ''}
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async addSelectedProductsToSubtab(modal) {
        const checkboxes = modal.querySelectorAll('#availableProducts input[type="checkbox"]:checked');
        const productIds = Array.from(checkboxes).map(cb => parseInt(cb.value));
        
        if (productIds.length === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}/products`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    product_remonline_ids: productIds
                })
            });
            
            if (response.ok) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
                await this.refreshProductsData();
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                this.loadProductsForModal(modal);
                
                // –ï—Å–ª–∏ —ç—Ç–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
                if (this.parentTab.activeSubtab === this) {
                    window.loadPage && window.loadPage();
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    async refreshProductsData() {
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}`);
            if (response.ok) {
                const data = await response.json();
                this.products = data.products || [];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    startRename() {
        const nameSpan = this.element.querySelector('.subtab-name');
        const currentName = nameSpan.textContent;
        
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentName;
        input.className = 'subtab-rename-input';
        
        nameSpan.parentNode.replaceChild(input, nameSpan);
        input.focus();
        input.select();

        const finishRename = async () => {
            const newName = input.value.trim();
            if (newName && newName !== currentName) {
                await this.rename(newName);
            }
            
            const newNameSpan = document.createElement('span');
            newNameSpan.className = 'subtab-name';
            newNameSpan.title = this.name;
            newNameSpan.textContent = this.name;
            input.parentNode.replaceChild(newNameSpan, input);
        };

        input.addEventListener('blur', finishRename);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishRename();
            } else if (e.key === 'Escape') {
                const nameSpan = document.createElement('span');
                nameSpan.className = 'subtab-name';
                nameSpan.title = currentName;
                nameSpan.textContent = currentName;
                input.parentNode.replaceChild(nameSpan, input);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async rename(newName) {
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: newName
                })
            });

            if (response.ok) {
                this.name = newName;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async delete() {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É "${this.name}"?`)) return;

        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≤–∫–ª–∞–¥–∫–∏
                const index = this.parentTab.subtabs.indexOf(this);
                if (index > -1) {
                    this.parentTab.subtabs.splice(index, 1);
                    this.parentTab.renderSubtabs();
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞, –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é
                    if (this.parentTab.activeSubtab === this) {
                        const newActive = this.parentTab.subtabs.find(s => s.isActive);
                        if (newActive) {
                            this.parentTab.selectSubtab(newActive);
                        } else {
                            this.parentTab.activeSubtab = null;
                            this.parentTab.tabsManager.onSubtabSelected(null);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ
     */
    getProductIds() {
        return this.products
            .filter(p => p.is_active)
            .map(p => p.product_remonline_id);
    }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π
 */
class Tab {
    constructor(data, tabsManager) {
        this.id = data.id;
        this.name = data.name;
        this.orderIndex = data.order_index;
        this.isActive = data.is_active;
        this.subtabs = data.subtabs || [];
        this.tabsManager = tabsManager;
        this.element = null;
        this.isSelected = false;
        this.activeSubtab = null;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç DOM —ç–ª–µ–º–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    createElement() {
        const tabElement = document.createElement('div');
        tabElement.className = 'tab-item';
        tabElement.dataset.tabId = this.id;
        tabElement.draggable = true;
        
        tabElement.innerHTML = `
            <div class="tab-header">
                <span class="tab-name" title="${this.name}">${this.name}</span>
                <div class="tab-actions">
                    <button class="btn-tab-edit" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn-tab-close" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                </div>
            </div>
        `;

        this.element = tabElement;
        this.bindEvents();
        
        return tabElement;
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –≤–∫–ª–∞–¥–∫–∏
     */
    bindEvents() {
        if (!this.element) return;

        const tabHeader = this.element.querySelector('.tab-header');
        const editBtn = this.element.querySelector('.btn-tab-edit');
        const closeBtn = this.element.querySelector('.btn-tab-close');

        // –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –≤–∫–ª–∞–¥–∫–∏ - –≤—ã–±–æ—Ä/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        tabHeader.addEventListener('click', (e) => {
            if (e.target === editBtn || e.target === closeBtn) return;
            this.toggle();
        });

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.startRename();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.delete();
        });

        // Drag & Drop –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        this.element.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', this.id);
            e.dataTransfer.effectAllowed = 'move';
            this.element.classList.add('dragging');
        });

        this.element.addEventListener('dragend', () => {
            this.element.classList.remove('dragging');
        });

        this.element.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        });

        this.element.addEventListener('drop', (e) => {
            e.preventDefault();
            const draggedTabId = parseInt(e.dataTransfer.getData('text/plain'));
            if (draggedTabId !== this.id) {
                this.tabsManager.moveTab(draggedTabId, this.id);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ (–≤—ã–±—Ä–∞–Ω–Ω–∞—è/—Å–≤—ë—Ä–Ω—É—Ç–∞—è)
     */
    toggle() {
        if (this.isSelected) {
            this.collapse();
        } else {
            this.tabsManager.selectTab(this);
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    select() {
        this.isSelected = true;
        this.element.classList.add('selected');
        
        // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (this.subtabs.length === 0) {
            this.createDefaultSubtab();
        }
    }

    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    collapse() {
        this.isSelected = false;
        this.element.classList.remove('selected');
        this.activeSubtab = null;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É "–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫"
     */
    async createDefaultSubtab() {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}/subtabs`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    tab_id: this.id,
                    name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫',
                    order_index: 0,
                    is_active: true
                })
            });

            if (response.ok) {
                const subtabData = await response.json();
                const subtab = new Subtab(subtabData, this);
                this.subtabs.push(subtab);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }


    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
     */
    startRename() {
        const nameSpan = this.element.querySelector('.tab-name');
        const currentName = nameSpan.textContent;
        
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentName;
        input.className = 'tab-rename-input';
        
        nameSpan.parentNode.replaceChild(input, nameSpan);
        input.focus();
        input.select();

        const finishRename = async () => {
            const newName = input.value.trim();
            if (newName && newName !== currentName) {
                await this.rename(newName);
            }
            
            const newNameSpan = document.createElement('span');
            newNameSpan.className = 'tab-name';
            newNameSpan.title = this.name;
            newNameSpan.textContent = this.name;
            input.parentNode.replaceChild(newNameSpan, input);
        };

        input.addEventListener('blur', finishRename);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishRename();
            } else if (e.key === 'Escape') {
                const nameSpan = document.createElement('span');
                nameSpan.className = 'tab-name';
                nameSpan.title = currentName;
                nameSpan.textContent = currentName;
                input.parentNode.replaceChild(nameSpan, input);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    async rename(newName) {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: newName
                })
            });

            if (response.ok) {
                this.name = newName;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    async delete() {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É "${this.name}"?`)) return;

        try {
            const response = await fetch(`/api/v1/tabs/${this.id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.tabsManager.removeTab(this);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    selectSubtab(subtab) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        if (this.activeSubtab && this.activeSubtab !== subtab) {
            this.activeSubtab.deselect();
        }
        
        this.activeSubtab = subtab;
        subtab.select();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∫–ª–∞–¥–æ–∫ –æ —Å–º–µ–Ω–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        this.tabsManager.onSubtabSelected(subtab);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    renderSubtabs() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        this.tabsManager.showSubtabs(this);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤–∫–ª–∞–¥–∫–∏
     */
    async updateOrder(newOrder) {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}/reorder`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ new_order: newOrder })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞:', errorData);
                return false;
            }
            
            this.orderIndex = newOrder;
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–∫–ª–∞–¥–∫–∏:', error);
            return false;
        }
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
 */
window.removeProductFromSubtab = async function(subtabId, productRemonlineId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏?')) return;
    
    try {
        const response = await fetch(`/api/v1/tabs/subtabs/${subtabId}/products/${productRemonlineId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–≤–∫–ª–∞–¥–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –¥–∞–Ω–Ω—ã–µ
            if (window.tabsManager) {
                const tab = window.tabsManager.tabs.find(t => 
                    t.subtabs.some(s => s.id === subtabId)
                );
                if (tab) {
                    const subtab = tab.subtabs.find(s => s.id === subtabId);
                    if (subtab) {
                        await subtab.refreshProductsData();
                        
                        // –ï—Å–ª–∏ —ç—Ç–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
                        if (tab.activeSubtab === subtab) {
                            window.loadPage && window.loadPage();
                        }
                    }
                }
            }
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
    }
};
