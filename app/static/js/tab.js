/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–æ–π
 */
class Subtab {
    constructor(data, parentTab) {
        this.id = data.id;
        this.tabId = data.tab_id;
        this.name = data.name;
        this.orderIndex = data.order_index;
        this.isActive = data.is_active;
        this.products = data.products || [];
        this.parentTab = parentTab;
        this.element = null;
        this.isSelected = false;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç DOM —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    createElement() {
        const subtabElement = document.createElement('div');
        subtabElement.className = 'subtab-item';
        subtabElement.dataset.subtabId = this.id;
        subtabElement.draggable = true;
        
        subtabElement.innerHTML = `
            <div class="subtab-header">
                <span class="subtab-name" title="${this.name}">${this.name}</span>
                <div class="subtab-actions">
                    <button class="btn-subtab-products" title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏">üì¶</button>
                    <button class="btn-subtab-edit" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn-subtab-close" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                </div>
            </div>
        `;

        this.element = subtabElement;
        this.bindEvents();
        
        return subtabElement;
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    bindEvents() {
        if (!this.element) return;

        const subtabHeader = this.element.querySelector('.subtab-header');
        const productsBtn = this.element.querySelector('.btn-subtab-products');
        const editBtn = this.element.querySelector('.btn-subtab-edit');
        const closeBtn = this.element.querySelector('.btn-subtab-close');

        // –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ - –≤—ã–±–æ—Ä
        subtabHeader.addEventListener('click', (e) => {
            if (e.target === productsBtn || e.target === editBtn || e.target === closeBtn) return;
            this.parentTab.selectSubtab(this);
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
        productsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.openProductsManager();
        });

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.startRename();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.delete();
        });

        // Drag & Drop –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
        this.element.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', `subtab:${this.id}`);
            e.dataTransfer.effectAllowed = 'move';
            this.element.classList.add('dragging');
        });

        this.element.addEventListener('dragend', () => {
            this.element.classList.remove('dragging');
        });

        this.element.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        });

        this.element.addEventListener('drop', (e) => {
            e.preventDefault();
            const draggedData = e.dataTransfer.getData('text/plain');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
            if (draggedData.startsWith('subtab:')) {
                const draggedSubtabId = parseInt(draggedData.split(':')[1]);
                if (draggedSubtabId !== this.id) {
                    this.parentTab.moveSubtab(draggedSubtabId, this.id);
                }
            }
        });
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    select() {
        this.isSelected = true;
        this.element.classList.add('selected');
    }

    /**
     * –°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    deselect() {
        this.isSelected = false;
        this.element.classList.remove('selected');
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    openProductsManager() {
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', this.name);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        const modal = this.createProductsModal();
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const toggleSizeBtn = modal.querySelector('#toggleModalSize');
        const modalDialog = modal.querySelector('.modal-dialog');
        let isFullscreen = false;
        
        toggleSizeBtn.addEventListener('click', () => {
            const availableProducts = modal.querySelector('#availableProducts');
            const subtabProducts = modal.querySelector('#subtabProducts');
            
            if (isFullscreen) {
                modalDialog.className = 'modal-dialog modal-xl modal-dialog-resizable';
                toggleSizeBtn.innerHTML = '‚õ∂';
                toggleSizeBtn.title = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω';
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –≤—ã—Å–æ—Ç—É
                if (availableProducts) availableProducts.style.height = '400px';
                if (subtabProducts) subtabProducts.style.height = '400px';
                isFullscreen = false;
            } else {
                modalDialog.className = 'modal-dialog modal-fullscreen modal-dialog-resizable';
                toggleSizeBtn.innerHTML = 'üóó';
                toggleSizeBtn.title = '–°–≤–µ—Ä–Ω—É—Ç—å –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞';
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                if (availableProducts) availableProducts.style.height = 'calc(100vh - 300px)';
                if (subtabProducts) subtabProducts.style.height = 'calc(100vh - 300px)';
                isFullscreen = true;
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('hidden.bs.modal', () => {
            modal.remove();
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        this.loadProductsForModal(modal);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
     */
    createProductsModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.tabIndex = -1;
        modal.innerHTML = `
            <div class="modal-dialog modal-xl modal-dialog-resizable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–¢–æ–≤–∞—Ä—ã –Ω–∞ –ª–∏—Å—Ç–µ "${this.name}"</h5>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="toggleModalSize" title="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞">‚õ∂</button>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <input type="text" class="form-control" id="productSearch" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ RemID...">
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="btn btn-primary" id="addSelectedProducts">
                                    –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <h6>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h6>
                                <div id="availableProducts" class="border p-2" style="height: 400px; overflow-y: auto;">
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6>–¢–æ–≤–∞—Ä—ã –Ω–∞ –ª–∏—Å—Ç–µ</h6>
                                <div id="subtabProducts" class="border p-2" style="height: 400px; overflow-y: auto;">
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
        
        return modal;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    async loadProductsForModal(modal) {
        const availableContainer = modal.querySelector('#availableProducts');
        const subtabContainer = modal.querySelector('#subtabProducts');
        const searchInput = modal.querySelector('#productSearch');
        const addButton = modal.querySelector('#addSelectedProducts');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            const response = await fetch('/api/v1/products/?limit=1000');
            const data = await response.json();
            const allProducts = data.data || [];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
            this.originalProductsData = allProducts;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≤–∫–ª—é—á–∞—è custom –ø–æ–ª—è)
            const subtabProductsResponse = await fetch(`/api/v1/tabs/subtabs/${this.id}/products`);
            const subtabProductsData = await subtabProductsResponse.json();
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
            const subtabProductIds = subtabProductsData.map(sp => sp.product_remonline_id);
            
            // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            const currentProducts = subtabProductsData.map(subtabProduct => {
                const fullProduct = allProducts.find(p => p.remonline_id === subtabProduct.product_remonline_id);
                return {
                    ...fullProduct,
                    id: subtabProduct.id, // ID –∑–∞–ø–∏—Å–∏ SubTabProduct –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    custom_name: subtabProduct.custom_name,
                    custom_category: subtabProduct.custom_category,
                    product_remonline_id: subtabProduct.product_remonline_id,
                    order_index: subtabProduct.order_index // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                };
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
            this.products = subtabProductsData;
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            const availableProducts = allProducts.filter(p => !subtabProductIds.includes(p.remonline_id));
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            this.renderProductsList(availableContainer, availableProducts, 'available');
            this.renderProductsList(subtabContainer, currentProducts, 'current');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    const query = e.target.value.toLowerCase();
                    const filtered = allProducts.filter(p => 
                        !subtabProductIds.includes(p.remonline_id) &&
                        (p.name.toLowerCase().includes(query) || 
                         (p.custom_name && p.custom_name.toLowerCase().includes(query)) ||
                         (p.remonline_id && p.remonline_id.toString().includes(query)))
                    );
                    this.renderProductsList(availableContainer, filtered, 'available');
                }, 300);
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            addButton.addEventListener('click', () => {
                this.addSelectedProductsToSubtab(modal);
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            availableContainer.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
            subtabContainer.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
     */
    renderProductsList(container, products, type) {
        if (products.length === 0) {
            container.innerHTML = '<div class="text-muted">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        const html = products.map(product => {
            if (type === 'current') {
                // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
                const displayName = product.custom_name || product.name;
                const displayCategory = product.custom_category || product.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
                
                return `
                    <div class="card mb-2 draggable-product" data-product-id="${product.id}" data-remonline-id="${product.product_remonline_id || product.remonline_id}" draggable="true">
                        <div class="card-body p-2">
                            <div class="row align-items-center">
                                <div class="col-auto pe-2">
                                    <span class="drag-handle text-muted" title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞" style="cursor: move;">‚ãÆ‚ãÆ</span>
                                </div>
                                <div class="col">
                                    <div class="mb-1">
                                        <strong class="editable-name" data-field="custom_name" title="–ö–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è">${displayName}</strong>
                                        ${product.custom_name ? '<small class="text-success ms-1">‚úì</small>' : ''}
                                    </div>
                                    ${product.custom_name ? `<div class="mb-1"><small class="text-muted">–û—Ä–∏–≥–∏–Ω–∞–ª: ${product.name}</small></div>` : ''}
                                    <div class="mb-1">
                                        <span class="text-muted">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: </span>
                                        <span class="editable-category" data-field="custom_category" title="–ö–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è">${displayCategory}</span>
                                        ${product.custom_category ? '<small class="text-success ms-1">‚úì</small>' : ''}
                                    </div>
                                    ${product.custom_category ? `<div class="mb-1"><small class="text-muted">–û—Ä–∏–≥–∏–Ω–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${product.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</small></div>` : ''}
                                    <small class="text-muted">ID: ${product.product_remonline_id || product.remonline_id} | SKU: ${product.sku || '-'} | –ü–æ—Ä—è–¥–æ–∫: ${product.order_index}</small>
                                </div>
                                <div class="col-auto">
                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                            onclick="removeProductFromSubtab(${this.id}, ${product.product_remonline_id || product.remonline_id})">
                                        –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                // –î–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—ã—á–Ω—ã–π –≤–∏–¥ —Å —á–µ–∫–±–æ–∫—Å–æ–º
                return `
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" value="${product.remonline_id}" 
                               id="${type}_${product.id}" data-product-id="${product.id}">
                        <label class="form-check-label" for="${type}_${product.id}">
                            <strong>${product.name}</strong><br>
                            <small class="text-muted">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</small><br>
                            <small class="text-muted">ID: ${product.remonline_id} | SKU: ${product.sku || '-'}</small>
                        </label>
                    </div>
                `;
            }
        }).join('');
        
        container.innerHTML = html;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ
        if (type === 'current') {
            this.bindEditableEvents(container);
            this.bindDragDropEvents(container);
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤
     */
    bindEditableEvents(container) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
        container.querySelectorAll('.editable-name').forEach(element => {
            element.addEventListener('click', (e) => {
                this.startEditField(e.target, 'custom_name');
            });
            element.style.cursor = 'pointer';
            element.style.borderBottom = '1px dashed #007bff';
        });

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        container.querySelectorAll('.editable-category').forEach(element => {
            element.addEventListener('click', (e) => {
                this.startEditField(e.target, 'custom_category');
            });
            element.style.cursor = 'pointer';
            element.style.borderBottom = '1px dashed #007bff';
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è drag&drop —Ç–æ–≤–∞—Ä–æ–≤
     */
    bindDragDropEvents(container) {
        const draggableItems = container.querySelectorAll('.draggable-product');
        
        draggableItems.forEach(item => {
            item.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', `product:${item.dataset.productId}:${item.dataset.remonlineId}`);
                e.dataTransfer.effectAllowed = 'move';
                item.classList.add('dragging');
            });

            item.addEventListener('dragend', () => {
                item.classList.remove('dragging');
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ drag-over –∫–ª–∞—Å—Å—ã
                container.querySelectorAll('.draggable-product').forEach(el => {
                    el.classList.remove('drag-over', 'drag-over-bottom');
                });
            });

            item.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                
                if (item.classList.contains('dragging')) return;
                
                const rect = item.getBoundingClientRect();
                const y = e.clientY - rect.top;
                const isBottomHalf = y > rect.height / 2;
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ drag-over –∫–ª–∞—Å—Å—ã
                container.querySelectorAll('.draggable-product').forEach(el => {
                    el.classList.remove('drag-over', 'drag-over-bottom');
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
                if (isBottomHalf) {
                    item.classList.add('drag-over-bottom');
                } else {
                    item.classList.add('drag-over');
                }
            });

            item.addEventListener('drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const draggedData = e.dataTransfer.getData('text/plain');
                if (!draggedData.startsWith('product:')) return;
                
                const [, draggedProductId, draggedRemonlineId] = draggedData.split(':');
                const draggedElement = container.querySelector(`[data-product-id="${draggedProductId}"]`);
                
                if (!draggedElement || draggedElement === item) return;
                
                const rect = item.getBoundingClientRect();
                const y = e.clientY - rect.top;
                const isBottomHalf = y > rect.height / 2;
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
                if (isBottomHalf) {
                    item.parentNode.insertBefore(draggedElement, item.nextSibling);
                } else {
                    item.parentNode.insertBefore(draggedElement, item);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                this.updateProductsOrder(container);
                
                // –û—á–∏—â–∞–µ–º drag-over –∫–ª–∞—Å—Å—ã
                item.classList.remove('drag-over', 'drag-over-bottom');
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    async updateProductsOrder(container) {
        const productElements = container.querySelectorAll('.draggable-product');
        const orderData = Array.from(productElements).map((element, index) => ({
            product_id: parseInt(element.dataset.productId),
            order_index: index
        }));

        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}/products/reorder`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ products: orderData })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');
            }

            console.log('–ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
            await this.refreshSubtabData();
            
            // –ï—Å–ª–∏ —ç—Ç–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            if (window.activeSubtab && window.activeSubtab.id === this.id) {
                if (typeof loadPage === 'function') {
                    loadPage();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        }
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
     */
    startEditField(element, fieldName) {
        const currentValue = element.textContent;
        const card = element.closest('.card');
        const productId = card.dataset.productId;
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ø—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentValue;
        input.className = 'form-control form-control-sm';
        input.style.minWidth = '200px';
        
        // –ó–∞–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –∏–Ω–ø—É—Ç
        element.parentNode.replaceChild(input, element);
        input.focus();
        input.select();

        const finishEdit = async () => {
            const newValue = input.value.trim();
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await this.updateSubtabProductField(productId, fieldName, newValue);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                const newElement = document.createElement('span');
                newElement.className = element.className;
                newElement.dataset.field = fieldName;
                newElement.title = '–ö–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
                newElement.textContent = newValue || (fieldName === 'custom_category' ? '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' : currentValue);
                newElement.style.cursor = 'pointer';
                newElement.style.borderBottom = '1px dashed #007bff';
                
                // –ó–∞–º–µ–Ω—è–µ–º input –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                const parentElement = input.parentNode;
                parentElement.replaceChild(newElement, input);
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                const existingCheckmark = parentElement.querySelector('.text-success');
                if (existingCheckmark) {
                    existingCheckmark.remove();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ
                if (newValue && newValue.trim() !== '') {
                    const checkmark = document.createElement('small');
                    checkmark.className = 'text-success ms-1';
                    checkmark.textContent = '‚úì';
                    checkmark.title = fieldName === 'custom_name' ? '–ö–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' : '–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';
                    parentElement.insertBefore(checkmark, newElement.nextSibling);
                }
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–æ–≤–æ
                newElement.addEventListener('click', (e) => {
                    this.startEditField(e.target, fieldName);
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                this.updateOriginalDataDisplay(card, fieldName, newValue);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                input.parentNode.replaceChild(element, input);
            }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        input.addEventListener('blur', finishEdit);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishEdit();
            } else if (e.key === 'Escape') {
                input.parentNode.replaceChild(element, input);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    updateOriginalDataDisplay(card, fieldName, newValue) {
        const originalSelector = fieldName === 'custom_name' ? '.original-name' : '.original-category';
        let originalElement = card.querySelector(originalSelector);
        
        if (newValue && newValue.trim() !== '') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (!originalElement) {
                originalElement = document.createElement('div');
                originalElement.className = 'mb-1';
                originalElement.innerHTML = `<small class="text-muted ${fieldName === 'custom_name' ? 'original-name' : 'original-category'}"></small>`;
                
                if (fieldName === 'custom_name') {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    const nameDiv = card.querySelector('.editable-name').closest('.mb-1');
                    nameDiv.parentNode.insertBefore(originalElement, nameDiv.nextSibling);
                } else {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const categoryDiv = card.querySelector('.editable-category').closest('.mb-1');
                    categoryDiv.parentNode.insertBefore(originalElement, categoryDiv.nextSibling);
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            const originalData = this.getOriginalProductData(card);
            const originalText = fieldName === 'custom_name' 
                ? `–û—Ä–∏–≥–∏–Ω–∞–ª: ${originalData.name}` 
                : `–û—Ä–∏–≥–∏–Ω–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${originalData.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`;
            
            originalElement.querySelector('small').textContent = originalText;
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if (originalElement) {
                originalElement.remove();
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
     */
    getOriginalProductData(card) {
        const productId = card.dataset.remonlineId;
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const originalProduct = this.originalProductsData?.find(p => 
            p.remonline_id === parseInt(productId)
        );
        
        return originalProduct || { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', category: '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' };
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ
     */
    async updateSubtabProductField(productId, fieldName, value) {
        const updateData = {};
        updateData[fieldName] = value || null;
        
        const response = await fetch(`/api/v1/tabs/subtabs/products/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('Server error:', errorText);
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        return response.json();
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async addSelectedProductsToSubtab(modal) {
        const checkboxes = modal.querySelectorAll('#availableProducts input[type="checkbox"]:checked');
        const productIds = Array.from(checkboxes).map(cb => parseInt(cb.value));
        
        if (productIds.length === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}/products`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    product_remonline_ids: productIds
                })
            });
            
            if (response.ok) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
                await this.refreshProductsData();
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                await this.loadProductsForModal(modal);
                
                // –ï—Å–ª–∏ —ç—Ç–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
                if (this.parentTab.activeSubtab === this) {
                    window.loadPage && window.loadPage();
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    async refreshProductsData() {
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}`);
            if (response.ok) {
                const data = await response.json();
                this.products = data.products || [];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    startRename() {
        const nameSpan = this.element.querySelector('.subtab-name');
        const currentName = nameSpan.textContent;
        
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentName;
        input.className = 'subtab-rename-input';
        
        nameSpan.parentNode.replaceChild(input, nameSpan);
        input.focus();
        input.select();

        const finishRename = async () => {
            const newName = input.value.trim();
            if (newName && newName !== currentName) {
                await this.rename(newName);
            }
            
            const newNameSpan = document.createElement('span');
            newNameSpan.className = 'subtab-name';
            newNameSpan.title = this.name;
            newNameSpan.textContent = this.name;
            input.parentNode.replaceChild(newNameSpan, input);
        };

        input.addEventListener('blur', finishRename);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishRename();
            } else if (e.key === 'Escape') {
                const nameSpan = document.createElement('span');
                nameSpan.className = 'subtab-name';
                nameSpan.title = currentName;
                nameSpan.textContent = currentName;
                input.parentNode.replaceChild(nameSpan, input);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async rename(newName) {
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: newName
                })
            });

            if (response.ok) {
                this.name = newName;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async delete() {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É "${this.name}"?`)) return;

        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≤–∫–ª–∞–¥–∫–∏
                const index = this.parentTab.subtabs.indexOf(this);
                if (index > -1) {
                    this.parentTab.subtabs.splice(index, 1);
                    this.parentTab.renderSubtabs();
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞, –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é
                    if (this.parentTab.activeSubtab === this) {
                        const newActive = this.parentTab.subtabs.find(s => s.isActive);
                        if (newActive) {
                            this.parentTab.selectSubtab(newActive);
                        } else {
                            this.parentTab.activeSubtab = null;
                            this.parentTab.tabsManager.onSubtabSelected(null);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ
     */
    getProductIds() {
        return this.products
            .filter(p => p.is_active)
            .map(p => p.product_remonline_id);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async refreshSubtabData() {
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}/products`);
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
            }
            
            const data = await response.json();
            this.products = data || [];
            
            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    async updateOrder(newOrder) {
        try {
            const response = await fetch(`/api/v1/tabs/subtabs/${this.id}/reorder`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ new_order: newOrder })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', errorData);
                return false;
            }
            
            this.orderIndex = newOrder;
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
            return false;
        }
    }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π
 */
class Tab {
    constructor(data, tabsManager) {
        this.id = data.id;
        this.name = data.name;
        this.orderIndex = data.order_index;
        this.isActive = data.is_active;
        this.subtabs = data.subtabs || [];
        this.tabsManager = tabsManager;
        this.element = null;
        this.isSelected = false;
        this.activeSubtab = null;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç DOM —ç–ª–µ–º–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    createElement() {
        const tabElement = document.createElement('div');
        tabElement.className = 'tab-item';
        tabElement.dataset.tabId = this.id;
        tabElement.draggable = true;
        
        tabElement.innerHTML = `
            <div class="tab-header">
                <span class="tab-name" title="${this.name}">${this.name}</span>
                <div class="tab-actions">
                    <button class="btn-tab-edit" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn-tab-close" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                </div>
            </div>
        `;

        this.element = tabElement;
        this.bindEvents();
        
        return tabElement;
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –≤–∫–ª–∞–¥–∫–∏
     */
    bindEvents() {
        if (!this.element) return;

        const tabHeader = this.element.querySelector('.tab-header');
        const editBtn = this.element.querySelector('.btn-tab-edit');
        const closeBtn = this.element.querySelector('.btn-tab-close');

        // –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –≤–∫–ª–∞–¥–∫–∏ - –≤—ã–±–æ—Ä/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        tabHeader.addEventListener('click', (e) => {
            if (e.target === editBtn || e.target === closeBtn) return;
            this.toggle();
        });

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.startRename();
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.delete();
        });

        // Drag & Drop –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        this.element.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', this.id);
            e.dataTransfer.effectAllowed = 'move';
            this.element.classList.add('dragging');
        });

        this.element.addEventListener('dragend', () => {
            this.element.classList.remove('dragging');
        });

        this.element.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        });

        this.element.addEventListener('drop', (e) => {
            e.preventDefault();
            const draggedTabId = parseInt(e.dataTransfer.getData('text/plain'));
            if (draggedTabId !== this.id) {
                this.tabsManager.moveTab(draggedTabId, this.id);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ (–≤—ã–±—Ä–∞–Ω–Ω–∞—è/—Å–≤—ë—Ä–Ω—É—Ç–∞—è)
     */
    toggle() {
        if (this.isSelected) {
            this.collapse();
        } else {
            this.tabsManager.selectTab(this);
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    select() {
        this.isSelected = true;
        this.element.classList.add('selected');
        
        // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (this.subtabs.length === 0) {
            this.createDefaultSubtab();
        }
    }

    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    collapse() {
        this.isSelected = false;
        this.element.classList.remove('selected');
        this.activeSubtab = null;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É "–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫"
     */
    async createDefaultSubtab() {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}/subtabs`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    tab_id: this.id,
                    name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫',
                    order_index: 0,
                    is_active: true
                })
            });

            if (response.ok) {
                const subtabData = await response.json();
                const subtab = new Subtab(subtabData, this);
                this.subtabs.push(subtab);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }


    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
     */
    startRename() {
        const nameSpan = this.element.querySelector('.tab-name');
        const currentName = nameSpan.textContent;
        
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentName;
        input.className = 'tab-rename-input';
        
        nameSpan.parentNode.replaceChild(input, nameSpan);
        input.focus();
        input.select();

        const finishRename = async () => {
            const newName = input.value.trim();
            if (newName && newName !== currentName) {
                await this.rename(newName);
            }
            
            const newNameSpan = document.createElement('span');
            newNameSpan.className = 'tab-name';
            newNameSpan.title = this.name;
            newNameSpan.textContent = this.name;
            input.parentNode.replaceChild(newNameSpan, input);
        };

        input.addEventListener('blur', finishRename);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishRename();
            } else if (e.key === 'Escape') {
                const nameSpan = document.createElement('span');
                nameSpan.className = 'tab-name';
                nameSpan.title = currentName;
                nameSpan.textContent = currentName;
                input.parentNode.replaceChild(nameSpan, input);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    async rename(newName) {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: newName
                })
            });

            if (response.ok) {
                this.name = newName;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É
     */
    async delete() {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É "${this.name}"?`)) return;

        try {
            const response = await fetch(`/api/v1/tabs/${this.id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.tabsManager.removeTab(this);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    selectSubtab(subtab) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        if (this.activeSubtab && this.activeSubtab !== subtab) {
            this.activeSubtab.deselect();
        }
        
        this.activeSubtab = subtab;
        subtab.select();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∫–ª–∞–¥–æ–∫ –æ —Å–º–µ–Ω–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        this.tabsManager.onSubtabSelected(subtab);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
     */
    renderSubtabs() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        this.tabsManager.showSubtabs(this);
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
     */
    async moveSubtab(draggedSubtabId, targetSubtabId) {
        const draggedSubtab = this.subtabs.find(s => s.id === draggedSubtabId);
        const targetSubtab = this.subtabs.find(s => s.id === targetSubtabId);
        
        if (!draggedSubtab || !targetSubtab) return;

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await draggedSubtab.updateOrder(targetSubtab.orderIndex);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await this.reloadSubtabs();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏:', error);
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –∏–∑ API
     */
    async reloadSubtabs() {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}/subtabs`);
            if (response.ok) {
                const subtabsData = await response.json();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫
                this.subtabs = subtabsData
                    .sort((a, b) => a.order_index - b.order_index)
                    .map(subtabData => new Subtab(subtabData, this));
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
                this.tabsManager.showSubtabs(this);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if (this.activeSubtab) {
                    const activeSubtab = this.subtabs.find(s => s.id === this.activeSubtab.id);
                    if (activeSubtab) {
                        this.selectSubtab(activeSubtab);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤–∫–ª–∞–¥–∫–∏
     */
    async updateOrder(newOrder) {
        try {
            const response = await fetch(`/api/v1/tabs/${this.id}/reorder`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ new_order: newOrder })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞:', errorData);
                return false;
            }
            
            this.orderIndex = newOrder;
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–∫–ª–∞–¥–∫–∏:', error);
            return false;
        }
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
 */
window.removeProductFromSubtab = async function(subtabId, productRemonlineId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏?')) return;
    
    try {
        const response = await fetch(`/api/v1/tabs/subtabs/${subtabId}/products/${productRemonlineId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–≤–∫–ª–∞–¥–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –¥–∞–Ω–Ω—ã–µ
            if (window.tabsManager) {
                const tab = window.tabsManager.tabs.find(t => 
                    t.subtabs.some(s => s.id === subtabId)
                );
                if (tab) {
                    const subtab = tab.subtabs.find(s => s.id === subtabId);
                    if (subtab) {
                        await subtab.refreshProductsData();
                        
                        // –ï—Å–ª–∏ —ç—Ç–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
                        if (tab.activeSubtab === subtab) {
                            window.loadPage && window.loadPage();
                        }
                    }
                }
            }
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏');
    }
};
